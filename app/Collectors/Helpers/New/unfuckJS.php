<?php
/* resolve fuckJS encoded with jsfuck.js
*! JSFuck 0.4.0 - http://jsfuck.com *
* Copyright (c) 2019 vb6rocod
*
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
* You should have received a copy of the GNU General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
*
* examples of usage :  $ret=unfuckJS($enc);
* $enc like ![]+[]([.... , generated by jsfuck.js
* $ret --> decoded, but can be a javascript....
*/

// test //
$h="[+!+[]]+[!+[]+!+[]]+[!+[]+!+[]+!+[]]+[!+[]+!+[]+!+[]+!+[]]+(![]+[])[+!+[]]";
$js=unfuckJS($h);
echo $js;

// function abc - replace from map and concat string
function abc($js) {
$map=array(
    'a' =>   '(false+[])[1]',
    'b' =>   '(+(11))[toString](20)',
    'c' =>   '([][filter]+[])[3]',
    'd' =>   '(undefined+[])[2]',
    'e' =>   '(true+[])[3]',
    'f' =>   '(false+[])[0]',
    'g' =>   '(+falseNaNString)[20]]',
    'h' =>   '(+(101))[toString](21)[1]',
    'i' =>   '([false]+undefined)[10]]',
    'j' =>   '(+(40))[toString](21)[1]',
    'k' =>   '(+(20))[toString](21)',
    'l' =>   '(false+[])[2]',
    'm' =>   '(Number+[])[11]]',
    'n' =>   '(undefined+[])[1]',
    'o' =>   '(true+[][filter])[10]]',
    'p' =>   '(+(211))[toString](31)[1]',
    'q' =>   '(+(212))[toString](31)[1]',
    'r' =>   '(true+[])[1]',
    's' =>   '(false+[])[3]',
    't' =>   '(true+[])[0]',
    'u' =>   '(undefined+[])[0]',
    'v' =>   '(+(31))[toString](32)',
    'w' =>   '(+(32))[toString](33)',
    'x' =>   '(+(101))[toString](34)[1]',
    'y' =>   '(NaN+[Infinity])[10]]',
    'z' =>   '(+(35))[toString](36)',
    '.' =>   '(+(+1+[1]+e+[2]+[0])+[])[1]',
    'S' =>   '(+falseString)[10]]',
    ' ' =>   '(NaN+[][filter])[11]]',
    '<' =>   'String[italics]()[0]',
    '%' =>   '[][filter](return escape)()(<)[0]',
    '=' =>   'String[fontcolor]()[11]]',
    'R' =>   '(+false+[][filter](return+(false+[+false])[italics]()[10]]+[0]+(false+[+false])[italics]()[10]])())[10]]',
    'E' =>   '([][filter](return+/+[0]+/)()+[])[12]]',
    'D' =>   '[][filter](return escape)()(=)[2]',
    'A' =>   '(+false+[])[10]]',
    'B' =>   '(+false+(false))[10]]',
    'C' =>   '[][filter](return escape)()(<)[2]',
    'F' =>   '(+false+[][filter])[10]]',
    'G' =>   '(false+[][filter](return Date)()())[30]]',
    'H' =>   '[][filter](return unescape)()(%+(48)+[])',
    'I' =>   '(Infinity+[])[0]',
    'J' =>   '([][filter](return new Date+(+[2]+[0]+[0]+[0]+[0]+[0]+[0]+[0]+[0]+))()+[])[4]',
    'K' =>   '[][filter](return unescape)()(%+[4]+b)',
    'L' =>   '[][filter](return unescape)()(%+[4]+c)',
    'M' =>   '(true+[][filter](return Date)()())[30]]',
    'N' =>   '(NaN+[])[0]',
    'O' =>   '([][filter](return new Date+(+[2]+[4]+[0]+[0]+[0]+[0]+[0]+[0]+[0]+[0]+[0]+))()+[])[4]',
    'P' =>   '[][filter](return unescape)()(%+(50)+[])',
    'Q' =>   '[][filter](return unescape)()(%+(51)+[])',
    'T' =>   '(NaN+[][filter](return Date)()())[30]]',
    'U' =>   '[][filter](return unescape)()(%+(55)+[])',
    'V' =>   '[][filter](return unescape)()(%+(56)+[])',
    'W' =>   '[][filter](return unescape)()(%+(57)+[])',
    'X' =>   '[][filter](return unescape)()(%+(58)+[])',
    'Y' =>   '[][filter](return unescape)()(%+(59)+[])',
    'Z' =>   '[][filter](return unescape)()(%+[5]+a)',
    '!' =>   '[][filter](return unescape)()(%+(21)+[])',
    '#' =>   '[][filter](return unescape)()(%+(23)+[])',
    '$' =>   '[][filter](return unescape)()(%+(24)+[])',
    '&' =>   '[][filter](return unescape)()(%+(26)+[])',
    '(' =>   '(false+[][filter])[20]]',
    ')' =>   '(true+[][filter])[20]]',
    '*' =>   '[][filter](return unescape)()(%+[2]+a)',
    ',' =>   '[[]][concat]([[]])+[]',
    '-' =>   '(+(.+[+[]+[0]+[0]+[0]+[0]+[0]+[0]+[0]+[0]+[1]])+[])[2]',
    '/' =>   '(false+[+false])[italics]()[10]]',
    ':' =>   '([][filter](return+/+[0]+/)()()+[])[3]',
    ';' =>   '[][filter](return unescape)()(%+[3]+b)',
    '>' =>   'String[italics]()[2]',
    '?' =>   '([][filter](return+/+[0]+/)()()+[])[2]',
    '@' =>   '[][filter](return unescape)()(%+(40)+[])',
    '\\' =>  '[][filter](return unescape)()(%+[5]+c)',
    '^' =>   '[][filter](return unescape)()(%+[5]+e)',
    '_' =>   '[][filter](return unescape)()(%+[5]+f)',
    '`' =>   '[][filter](return unescape)()(%+(60)+[])',
    '{' =>   '(NaN+[][filter])[21]]',
    '|' =>   '[][filter](return unescape)()(%+[7]+c)',
    '}' =>   '[][filter](return unescape)()(%+[7]+d)',
    '~' =>   '[][filter](return unescape)()(%+[7]+e)',
    '\'' =>  '[][filter](return unescape)()(%+(27)+[])',
    '"' =>   'String[fontcolor]()[12]]',
    'PLUS_SIGN' => '(+(+1+(1+[])[3]+[1]+[0]+[0])+[])[2]',
    'bracket_L' => '([][filter](return this)()+[])[0]',
    'bracket_R' => '[][filter](return unescape)()(%+[5]+d)',
);
foreach($map as $key=>$value) {
 $js=str_replace($value,$key,$js);
}
// concat str
for ($z=0;$z<5;$z++) {
preg_match_all("/((\+?[a-zA-Z\s]+)\+?)+/",$js,$m);
for ($k=0;$k<count($m[0]);$k++) {
  $rest=$m[0][$k];
  $first=""; $last="";
  if (strlen($rest) > 1) {
    $first=$rest[0];
    $last=$rest[strlen($rest)-1];
    $rest=substr($rest, 1, strlen($rest)-2);
    $js=str_replace($m[0][$k],$first.str_replace("+","",$rest).$last,$js);
  }
}

$js=str_replace("[constructor]","",$js);
$js=str_replace('[][filter](return+(NaN+[][filter])[11]]+unescape)()([][filter](return+(NaN+[][filter])[11]]+escape)()','',$js);
foreach($map as $key=>$value) {
 $js=str_replace($value,$key,$js);
}
}
return $js;
}
// end function abc


function unfuckJS($js) {
$js=preg_replace("/\s*/","",$js);
// fix numbers
$a =array(
   'Infinity' => '+(+!+[]+(!+[]+[])[!+[]+!+[]+!+[]]+[+!+[]]+[+[]]+[+[]]+[+[]])',
   'String' => '([]+[])',
   'undefined' => '[][[]]',
   'NaN' => '+[![]]',
   'Number' => '(+[])',
   'true' => '!![]',
   'false' => '![]',
);
foreach($a as $key=>$value) {
 $js=str_replace($value,$key,$js);
}
$js=str_replace("!false","true",$js);

$js=str_replace("!+[]","1",$js);
$js=str_replace("[+[]]","[0]",$js);

/* patch cloudflare - different jsfuck */
if (preg_match_all("/\(1(\+|true|\[|\])+\)/",$js,$m)) {
for ($k=0;$k<count($m[0]);$k++) {
  $v=str_replace("true","1",$m[0][$k]);
  $v=str_replace("+[]","",$v);
  $v=str_replace("(","[",$v);
  $v=str_replace(")","]",$v);
  $js=str_replace($m[0][$k],$v,$js);
}
$js=str_replace("+Number+","+[0]+",$js);
$js=str_replace("+Number","+[0]",$js);
$js=str_replace("Number+","[0]+",$js); ////????
$js=str_replace("(+true)","[1]",$js);
$js=str_replace("(true)","[1]",$js);
}
/* end patch cloudflare */;
$js=preg_replace_callback(
 "/\[((\d|\+)+)\]/",
 function ($matches) {
  $code="\$v=".$matches[1].";";
  eval ($code);
  return "[".$v."]";
 },
 $js
);
// 1+1+1
$js=preg_replace_callback(
 "/(\d\+)+/",
 function ($matches) {
  $code="\$v=".substr($matches[0], 0, -1).";";
  eval ($code);
  return "".$v."+";
 },
 $js
);

// [+10] ==> [10]
$js=preg_replace_callback(
 "/\[\+(\d+)\]/",
 function ($matches) {
  return "[".$matches[1]."]";
 },
 $js
);
// [[1]+[1]] // [10+[1]]
preg_match_all("/\[((\+?\d+)|(\+?\[\d+\])\+?){1,}\]/",$js,$m);
for ($k=0;$k<count($m[0]);$k++) {
 $value=$m[0][$k];
 $first=""; $first1=""; $last=""; $last1="";
 if(preg_match("/\[|\]|\+/",$value[0])) $first=$value[0];
 if (strlen($value) > 1 && $first && preg_match("/\[|\]|\+/",$value[1])) $first1=$value[1];
 if(preg_match("/\[|\]|\+/",$value[strlen($value)-1])) $last=$value[strlen($value)-1];
 if (strlen($value)>1 && $last && preg_match("/\[|\]|\+/",$value[strlen($value)-2])) $last1=$value[strlen($value)-2];
 $rest=$value;
 if(preg_match("/\[|\]|\+/",$first)) $rest=substr($rest, 1);
 if(preg_match("/\[|\]|\+/",$first1)) $rest=substr($rest, 1);
 if(preg_match("/\[|\]|\+/",$last))  $rest=substr($rest, 0, -1);
 if(preg_match("/\[|\]|\+/",$last1) && preg_match("/\[|\]|\+/",$last))  $rest=substr($rest, 0, -1);
 $rest=preg_replace("/\[|\]|\+/","",$rest);
 $rest=str_replace("+","",$rest);
 $js=str_replace($value,$first.$first1.$rest.$last1.$last,$js);
}
// (1+[+1]) (1+1)
preg_match_all("/\(((\+?\d+)|(\+?\[\d+\])\+?){1,}\)/",$js,$m);
for ($k=0;$k<count($m[0]);$k++) {
 $value=$m[0][$k];
 $first=""; $first1=""; $last=""; $last1="";
 if(preg_match("/\[|\]|\+/",$value[0])) $first=$value[0];
 if (strlen($value) > 1 && $first && preg_match("/\[|\]|\+/",$value[1])) $first1=$value[1];
 if(preg_match("/\[|\]|\+/",$value[strlen($value)-1])) $last=$value[strlen($value)-1];
 if (strlen($value)>1 && $last && preg_match("/\[|\]|\+/",$value[strlen($value)-2])) $last1=$value[strlen($value)-2];
 $rest=$value;
 if(preg_match("/\[|\]|\+/",$first)) $rest=substr($rest, 1);
 if(preg_match("/\[|\]|\+/",$first1)) $rest=substr($rest, 1);
 if(preg_match("/\[|\]|\+/",$last))  $rest=substr($rest, 0, -1);
 if(preg_match("/\[|\]|\+/",$last1) && preg_match("/\[|\]|\+/",$last))  $rest=substr($rest, 0, -1);
 $rest=preg_replace("/\[|\]|\+/","",$rest);
 $rest=str_replace("+","",$rest);
 $js=str_replace($value,$first.$first1.$rest.$last1.$last,$js);
}
$js=preg_replace_callback(
 "/\[\+(\d+)\]/",
 function ($matches) {
  return "[".$matches[1]."]";
 },
 $js
);
$js=preg_replace_callback(
 "/\(\+(\d+)\)/",
 function ($matches) {
  return "[".$matches[1]."]";
 },
 $js
);
$js=abc($js);
$js=preg_replace("/\[(\d+)\]/","\$1",$js);
$js=preg_replace("/\[|\]|\+/","",$js);
$js=str_replace("PLUS_SIGN","+",$js);
$js=str_replace("bracket_L","[",$js);
$js=str_replace("bracket_R","]",$js);
return $js;
}
?>
